buildscript {
    ext {
        kotlinVersion = '1.6.21'
        springBootVersion = '2.7.0'
    }
    repositories {
        mavenCentral()
/*        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
        maven {
            url "https://dl.bintray.com/ntrrgc/maven"
        }*/
    }
    configurations.create("tsSourceClasses") {
        transitive = false
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        tsSourceClasses "com.tin:tin:0.0.1-SNAPSHOT"

    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'war'

group = "com.tin"
version = "0.0.1-SNAPSHOT"


/*plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'org.jetbrains.kotlin.kapt' version '1.6.0'
    id "net.innospire.typescript-generator" version "1.6.0"
    id 'maven-publish'
}*/

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // kotlin
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation"org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"

    // spring
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    //owl api
    implementation group: 'net.sourceforge.owlapi', name: 'owlapi-distribution', version: '5.1.0'
    implementation group: 'net.sourceforge.owlapi', name: 'org.semanticweb.hermit', version: '1.3.8.510'

    // other
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.7.0'

    //testing
    implementation 'org.springframework.boot:spring-boot-starter-test'


}


test {
    useJUnitPlatform()
}


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed"
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            //artifact bootJar
        }
    }
}

/*task extractTsSourceClasses(type: Copy) {
    delete "$buildDir/tsSourceClasses"
    from zipTree(buildscript.configurations.tsSourceClasses.singleFile)
    into "$buildDir/tsSourceClasses" as Object
}

task generateTsTin(type: net.innospire.tsgen.GenerateTypescriptTask) {
    nestingLevel = 2
    dependsOn(extractTsSourceClasses)
    inputDir = file("$buildDir/tsSourceClasses/")
    outputDir = file("tin/src/rest-api/generated")
    controllerClassNamespace = "kotlin.tin.controller"
    endpoint = "tin"
    version9 = true
    dataClassNamespaces = ["tin.data"]
}*/
